<?xml version="1.0" encoding="UTF-8"?>

<text>
 <s id="1">If there's one city in the world where it's hard to find a place to buy or rent, it's Sydney.</s>
 <s id="2">And if you've tried to find a home here recently, you're familiar with the problem.</s>
 <s id="3">Every time you walk into an open house, you get some information about what's out there and what's on the market, but every time you walk out, you're running the risk of the very best place passing you by.</s>
 <s id="4">So how do you know when to switch from looking to being ready to make an offer?</s>
 <s id="5">This is such a cruel and familiar problem that it might come as a surprise that it has a simple solution.</s>
 <s id="6">37 percent.</s>
 <s id="7">(Laughter) If you want to maximize the probability that you find the very best place, you should look at 37 percent of what's on the market, and then make an offer on the next place you see, which is better than anything that you've seen so far.</s>
 <s id="8">Or if you're looking for a month, take 37 percent of that time -- 11 days, to set a standard -- and then you're ready to act.</s>
 <s id="9">We know this because trying to find a place to live is an example of an optimal stopping problem.</s>
 <s id="10">A class of problems that has been studied extensively by mathematicians and computer scientists.</s>
 <s id="11">I'm a computational cognitive scientist.</s>
 <s id="12">I spend my time trying to understand how it is that human minds work, from our amazing successes to our dismal failures.</s>
 <s id="13">To do that, I think about the computational structure of the problems that arise in everyday life, and compare the ideal solutions to those problems to the way that we actually behave.</s>
 <s id="14">As a side effect, I get to see how applying a little bit of computer science can make human decision-making easier.</s>
 <s id="15">I have a personal motivation for this.</s>
 <s id="16">Growing up in Perth as an overly cerebral kid ...</s>
 <s id="17">(Laughter) I would always try and act in the way that I thought was rational, reasoning through every decision, trying to figure out the very best action to take.</s>
 <s id="18">But this is an approach that doesn't scale up when you start to run into the sorts of problems that arise in adult life.</s>
 <s id="19">At one point, I even tried to break up with my girlfriend because trying to take into account her preferences as well as my own and then find perfect solutions -- (Laughter) was just leaving me exhausted.</s>
 <s id="20">(Laughter) She pointed out that I was taking the wrong approach to solving this problem -- and she later became my wife.</s>
 <s id="21">(Laughter) (Applause) Whether it's as basic as trying to decide what restaurant to go to or as important as trying to decide who to spend the rest of your life with, human lives are filled with computational problems that are just too hard to solve by applying sheer effort.</s>
 <s id="22">For those problems, it's worth consulting the experts: computer scientists.</s>
 <s id="23">(Laughter) When you're looking for life advice, computer scientists probably aren't the first people you think to talk to.</s>
 <s id="24">Living life like a computer -- stereotypically deterministic, exhaustive and exact -- doesn't sound like a lot of fun.</s>
 <s id="25">But thinking about the computer science of human decisions reveals that in fact, we've got this backwards.</s>
 <s id="26">When applied to the sorts of difficult problems that arise in human lives, the way that computers actually solve those problems looks a lot more like the way that people really act.</s>
 <s id="27">Take the example of trying to decide what restaurant to go to.</s>
 <s id="28">This is a problem that has a particular computational structure.</s>
 <s id="29">You've got a set of options, you're going to choose one of those options, and you're going to face exactly the same decision tomorrow.</s>
 <s id="30">In that situation, you run up against what computer scientists call the "explore-exploit trade-off."</s>
 <s id="31">You have to make a decision about whether you're going to try something new -- exploring, gathering some information that you might be able to use in the future -- or whether you're going to go to a place that you already know is pretty good -- exploiting the information that you've already gathered so far.</s>
 <s id="32">The explore/exploit trade-off shows up any time you have to choose between trying something new and going with something that you already know is pretty good, whether it's listening to music or trying to decide who you're going to spend time with.</s>
 <s id="33">It's also the problem that technology companies face when they're trying to do something like decide what ad to show on a web page.</s>
 <s id="34">Should they show a new ad and learn something about it, or should they show you an ad that they already know there's a good chance you're going to click on?</s>
 <s id="35">Over the last 60 years, computer scientists have made a lot of progress understanding the explore/exploit trade-off, and their results offer some surprising insights.</s>
 <s id="36">When you're trying to decide what restaurant to go to, the first question you should ask yourself is how much longer you're going to be in town.</s>
 <s id="37">If you're just going to be there for a short time, then you should exploit.</s>
 <s id="38">There's no point gathering information.</s>
 <s id="39">Just go to a place you already know is good.</s>
 <s id="40">But if you're going to be there for a longer time, explore.</s>
 <s id="41">Try something new, because the information you get is something that can improve your choices in the future.</s>
 <s id="42">The value of information increases the more opportunities you're going to have to use it.</s>
 <s id="43">This principle can give us insight into the structure of a human life as well.</s>
 <s id="44">Babies don't have a reputation for being particularly rational.</s>
 <s id="45">They're always trying new things, and you know, trying to stick them in their mouths.</s>
 <s id="46">But in fact, this is exactly what they should be doing.</s>
 <s id="47">They're in the explore phase of their lives, and some of those things could turn out to be delicious.</s>
 <s id="48">At the other end of the spectrum, the old guy who always goes to the same restaurant and always eats the same thing isn't boring -- he's optimal.</s>
 <s id="49">(Laughter) He's exploiting the knowledge that he's earned through a lifetime's experience.</s>
 <s id="50">More generally, knowing about the explore/exploit trade-off can make it a little easier for you to sort of relax and go easier on yourself when you're trying to make a decision.</s>
 <s id="51">You don't have to go to the best restaurant every night.</s>
 <s id="52">Take a chance, try something new, explore.</s>
 <s id="53">You might learn something.</s>
 <s id="54">And the information that you gain is going to be worth more than one pretty good dinner.</s>
 <s id="55">Computer science can also help to make it easier on us in other places at home and in the office.</s>
 <s id="56">If you've ever had to tidy up your wardrobe, you've run into a particularly agonizing decision: you have to decide what things you're going to keep and what things you're going to give away.</s>
 <s id="57">Martha Stewart turns out to have thought very hard about this -- (Laughter) and she has some good advice.</s>
 <s id="58">She says, "Ask yourself four questions: How long have I had it?</s>
 <s id="59">Does it still function?</s>
 <s id="60">Is it a duplicate of something that I already own?</s>
 <s id="61">And when was the last time I wore it or used it?"</s>
 <s id="62">But there's another group of experts who perhaps thought even harder about this problem, and they would say one of these questions is more important than the others.</s>
 <s id="63">Those experts?</s>
 <s id="64">The people who design the memory systems of computers.</s>
 <s id="65">Most computers have two kinds of memory systems: a fast memory system, like a set of memory chips that has limited capacity, because those chips are expensive, and a slow memory system, which is much larger.</s>
 <s id="66">In order for the computer to operate as efficiently as possible, you want to make sure that the pieces of information you want to access are in the fast memory system, so that you can get to them quickly.</s>
 <s id="67">Each time you access a piece of information, it's loaded into the fast memory and the computer has to decide which item it has to remove from that memory, because it has limited capacity.</s>
 <s id="68">Over the years, computer scientists have tried a few different strategies for deciding what to remove from the fast memory.</s>
 <s id="69">They've tried things like choosing something at random or applying what's called the "first-in, first-out principle," which means removing the item which has been in the memory for the longest.</s>
 <s id="70">But the strategy that's most effective focuses on the items which have been least recently used.</s>
 <s id="71">This says if you're going to decide to remove something from memory, you should take out the thing which was last accessed the furthest in the past.</s>
 <s id="72">And there's a certain kind of logic to this.</s>
 <s id="73">If it's been a long time since you last accessed that piece of information, it's probably going to be a long time before you're going to need to access it again.</s>
 <s id="74">Your wardrobe is just like the computer's memory.</s>
 <s id="75">You have limited capacity, and you need to try and get in there the things that you're most likely to need so that you can get to them as quickly as possible.</s>
 <s id="76">Recognizing that, maybe it's worth applying the least recently used principle to organizing your wardrobe as well.</s>
 <s id="77">So if we go back to Martha's four questions, the computer scientists would say that of these, the last one is the most important.</s>
 <s id="78">This idea of organizing things so that the things you are most likely to need are most accessible can also be applied in your office.</s>
 <s id="79">The Japanese economist Yukio Noguchi actually invented a filing system that has exactly this property.</s>
 <s id="80">He started with a cardboard box, and he put his documents into the box from the left-hand side.</s>
 <s id="81">Each time he'd add a document, he'd move what was in there along and he'd add that document to the left-hand side of the box.</s>
 <s id="82">And each time he accessed a document, he'd take it out, consult it and put it back in on the left-hand side.</s>
 <s id="83">As a result, the documents would be ordered from left to right by how recently they had been used.</s>
 <s id="84">And he found he could quickly find what he was looking for by starting at the left-hand side of the box and working his way to the right.</s>
 <s id="85">Before you dash home and implement this filing system -- (Laughter) it's worth recognizing that you probably already have.</s>
 <s id="86">(Laughter) That pile of papers on your desk ...</s>
 <s id="87">typically maligned as messy and disorganized, a pile of papers is, in fact, perfectly organized -- (Laughter) as long as you, when you take a paper out, put it back on the top of the pile, then those papers are going to be ordered from top to bottom by how recently they were used, and you can probably quickly find what you're looking for by starting at the top of the pile.</s>
 <s id="88">Organizing your wardrobe or your desk are probably not the most pressing problems in your life.</s>
 <s id="89">Sometimes the problems we have to solve are simply very, very hard.</s>
 <s id="90">But even in those cases, computer science can offer some strategies and perhaps some solace.</s>
 <s id="91">The best algorithms are about doing what makes the most sense in the least amount of time.</s>
 <s id="92">When computers face hard problems, they deal with them by making them into simpler problems -- by making use of randomness, by removing constraints or by allowing approximations.</s>
 <s id="93">Solving those simpler problems can give you insight into the harder problems, and sometimes produces pretty good solutions in their own right.</s>
 <s id="94">Knowing all of this has helped me to relax when I have to make decisions.</s>
 <s id="95">You could take the 37 percent rule for finding a home as an example.</s>
 <s id="96">There's no way that you can consider all of the options, so you have to take a chance.</s>
 <s id="97">And even if you follow the optimal strategy, you're not guaranteed a perfect outcome.</s>
 <s id="98">If you follow the 37 percent rule, the probability that you find the very best place is -- funnily enough ...</s>
 <s id="99">(Laughter) 37 percent.</s>
 <s id="100">You fail most of the time.</s>
 <s id="101">But that's the best that you can do.</s>
 <s id="102">Ultimately, computer science can help to make us more forgiving of our own limitations.</s>
 <s id="103">You can't control outcomes, just processes.</s>
 <s id="104">And as long as you've used the best process, you've done the best that you can.</s>
 <s id="105">Sometimes those best processes involve taking a chance -- not considering all of your options, or being willing to settle for a pretty good solution.</s>
 <s id="106">These aren't the concessions that we make when we can't be rational -- they're what being rational means.</s>
 <s id="107">Thank you.</s>
 <s id="108">(Applause)</s>
</text>
