<?xml version="1.0" encoding="UTF-8"?>

<text>
 <s id="1">In the summer of 1997, NASA's Pathfinder spacecraft landed on the surface of Mars, and began transmitting incredible, iconic images back to Earth.</s>
 <s id="2">But several days in, something went terribly wrong.</s>
 <s id="3">The transmissions stopped.</s>
 <s id="4">Pathfinder was, in effect, procrastinating: keeping itself fully occupied but failing to do its most important work.</s>
 <s id="5">What was going on?</s>
 <s id="6">There was a bug, it turned out, in its scheduler.</s>
 <s id="7">Every operating system has something called the scheduler that tells the CPU how long to work on each task before switching, and what to switch to.</s>
 <s id="8">Done right, computers move so fluidly between their various responsibilities, they give the illusion of doing everything simultaneously.</s>
 <s id="9">But we all know what happens when things go wrong.</s>
 <s id="10">This should give us, if nothing else, some measure of consolation.</s>
 <s id="11">Even computers get overwhelmed sometimes.</s>
 <s id="12">Maybe learning about the computer science of scheduling can give us some ideas about our own human struggles with time.</s>
 <s id="13">One of the first insights is that all the time you spend prioritizing your work is time you aren't spending doing it.</s>
 <s id="14">For instance, let's say when you check your inbox, you scan all the messages, choosing which is the most important.</s>
 <s id="15">Once you've dealt with that one, you repeat.</s>
 <s id="16">Seems sensible, but there's a problem here.</s>
 <s id="17">This is what's known as a quadratic-time algorithm.</s>
 <s id="18">With an inbox that's twice as full, these passes will take twice as long and you'll need to do twice as many of them!</s>
 <s id="19">This means four times the work.</s>
 <s id="20">The programmers of the operating system Linux encountered a similar problem in 2003.</s>
 <s id="21">Linux would rank every single one of its tasks in order of importance, and sometimes spent more time ranking tasks than doing them.</s>
 <p id="p22">
  <s id="22.1">The programmers’ counterintuitive solution was to replace this full ranking with a limited number of priority “buckets.”</s>
  <s id="22.2">The system was less precise about what to do next but more than made up for it by spending more time making progress.</s>
 </p>
 <s id="23">So with your emails, insisting on always doing the very most important thing first could lead to a meltdown.</s>
 <s id="24">Waking up to an inbox three times fuller than normal could take nine times longer to clear.</s>
 <s id="25">You’d be better off replying in chronological order, or even at random!</s>
 <s id="26">Surprisingly, sometimes giving up on doing things in the perfect order may be the key to getting them done.</s>
 <s id="27">Another insight that emerges from computer scheduling has to do with one of the most prevalent features of modern life: interruptions.</s>
 <s id="28">When a computer goes from one task to another, it has to do what's called a context switch, bookmarking its place in one task, moving old data out of its memory and new data in.</s>
 <s id="29">Each of these actions comes at a cost.</s>
 <s id="30">The insight here is that there’s a fundamental tradeoff between productivity and responsiveness.</s>
 <s id="31">Getting serious work done means minimizing context switches.</s>
 <s id="32">But being responsive means reacting anytime something comes up.</s>
 <s id="33">These two principles are fundamentally in tension.</s>
 <s id="34">Recognizing this tension allows us to decide where we want to strike that balance.</s>
 <s id="35">The obvious solution is to minimize interruptions.</s>
 <s id="36">The less obvious one is to group them.</s>
 <p id="p37">
  <s id="37.1">If no notification or email requires a response more urgently than once an hour, say, then that’s exactly how often you should check them.</s>
  <s id="37.2">No more.</s>
 </p>
 <s id="38">In computer science, this idea goes by the name of interrupt coalescing.</s>
 <s id="39">Rather than dealing with things as they come up – Oh, the mouse was moved?</s>
 <s id="40">A key was pressed?</s>
 <s id="41">More of that file downloaded? – the system groups these interruptions together based on how long they can afford to wait.</s>
 <s id="42">In 2013, interrupt coalescing triggered a massive improvement in laptop battery life.</s>
 <s id="43">This is because deferring interruptions lets a system check everything at once, then quickly re-enter a low-power state.</s>
 <s id="44">As with computers, so it is with us.</s>
 <s id="45">Perhaps adopting a similar approach might allow us users to reclaim our own attention, and give us back one of the things that feels so rare in modern life: rest.</s>
</text>
