<?xml version="1.0" encoding="UTF-8"?>

<text>
 <s id="1">Ethic, Hedge, and Octavia stand on the edge of a bottomless ravine.</s>
 <s id="2">It’s the only thing between them and the tower that houses the second of three powerful artifacts.</s>
 <s id="3">They’ve got a brief window of time to get across before the guards return.</s>
 <s id="4">With Hedge’s fuel gauge on empty he won’t be able to fly Ethic across, so the only option is to make a bridge.</s>
 <s id="5">Fortunately, the floating stacks of stones nearby are bridge components— invented by Octavia herself— called hover-blocks.</s>
 <s id="6">Activate a pile with a burst of energy, and they’ll self-assemble to span the ravine as Ethic walks across.</s>
 <s id="7">But there is, of course, a catch.</s>
 <s id="8">The hover-blocks are only stable when they’re perfectly palindromic.</s>
 <s id="9">Meaning they have to form a sequence that’s the same when viewed forwards and backwards.</s>
 <s id="10">The stacks start in random orders, but will always put themselves into a palindromic configuration if they can.</s>
 <s id="11">If they get to a point where a palindrome isn’t possible, the bridge will collapse, and whoever’s on it will fall into the ravine.</s>
 <s id="12">Let’s look at an example.</s>
 <s id="13">This stack would make itself stable.</s>
 <s id="14">First the A blocks hold themselves in place.</s>
 <s id="15">Then the B’s.</s>
 <s id="16">And finally the C would nestle right between the B’s.</s>
 <s id="17">However, suppose there was one more A.</s>
 <s id="18">First two A blocks form up, then two B’s, but now the remaining C and A have nowhere to go, so the whole thing falls apart.</s>
 <s id="19">The Node of Power enables Hedge to energize a single stack of blocks.</s>
 <s id="20">What instructions can Ethic give Hedge to allow him to efficiently find and power a stable palindromic stack?</s>
 <s id="21">Pause now to figure it out for yourself.</s>
 <s id="22">Examples of palindromes include ANNA, RACECAR, and MADAM IM ADAM.</s>
 <s id="23">Counting the number of times a given letter appears in a palindrome will reveal a helpful pattern.</s>
 <s id="24">Pause now to figure it out for yourself.</s>
 <s id="25">Let’s first look at a naïve solution to this problem.</s>
 <s id="26">A naïve solution is a simple, brute-force approach that isn’t optimized— but will get the job done.</s>
 <s id="27">Naïve solutions are helpful ways to analyze problems, and work as stepping stones to better solutions.</s>
 <s id="28">In this case, a naïve solution is to approach a pile of blocks, try all the arrangements, and see if one is a palindrome by reading it forward and then backwards.</s>
 <s id="29">The problem with this approach is that it would take a tremendous amount of time.</s>
 <s id="30">If Hedge tried one combination every second, a stack of just 10 different blocks would take him 42 days to exhaust.</s>
 <s id="31">That’s because the total time is a function of the factorial of the number of blocks there are.</s>
 <s id="32">10 blocks have over 3 million combinations.</s>
 <s id="33">What this naïve solution shows is that we need a much faster way to tell whether a pile of blocks can form a palindrome.</s>
 <s id="34">To start, it may be intuitively clear that a pile of all different blocks will never form one.</s>
 <s id="35">Why?</s>
 <s id="36">The first and last blocks can’t be the same if there are no repeats.</s>
 <s id="37">So when can a given sequence become a palindrome?</s>
 <s id="38">One way to figure that out is to analyze a few existing palindromes.</s>
 <s id="39">In ANNA, there are 2 A’s and 2 N’s.</s>
 <s id="40">RACECAR has 2 R’s, 2 A’s, 2 C’s, and 1 E.</s>
 <s id="41">And MADAM IM ADAM has 4 M’s, 4 A’s, 2 D’s, and 1 I.</s>
 <s id="42">The pattern here is that most of the letters occur an even number of times, and there’s at most 1 that occurs just once.</s>
 <s id="43">Is that it?</s>
 <s id="44">What if RACECAR had 3 E’s instead of 1?</s>
 <s id="45">We could tack the new E’s onto the ends and still get a palindrome, so 3 is ok.</s>
 <s id="46">But make that 3 E’s and 3 C’s, and there’s nowhere for the last C to go.</s>
 <s id="47">So the most generalized insight is that at most one letter can appear an odd number of times, but the rest have to be even.</s>
 <s id="48">Hedge can count the letters in each stack and organize them into a dictionary, which is a tidy way of storing information.</s>
 <s id="49">A loop could then go through and count how many times odd numbers appear.</s>
 <s id="50">If there are less than 2 odd characters, the stack can be made into a palindrome.</s>
 <s id="51">This approach is much, much faster than the naïve solution.</s>
 <s id="52">Instead of factorial time, it takes linear time.</s>
 <s id="53">That’s where the time increases in proportion to the number of blocks there are.</s>
 <s id="54">Now write a loop for Hedge to approach the piles individually, and stop when he finds a good one, and you’ll be ready to go.</s>
 <s id="55">Here’s what happens: Hedge is fast, but there are so many piles it takes a long time.</s>
 <s id="56">Too long.</s>
 <s id="57">Ethic and Hedge are safe.</s>
 <s id="58">But Octavia is not so lucky.</s>
</text>
