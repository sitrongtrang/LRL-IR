<?xml version="1.0" encoding="UTF-8"?>

<text>
 <s id="1">You work at the college library.</s>
 <s id="2">You're in the middle of a quiet afternoon when suddenly a shipment of 1,280 different books arrives.</s>
 <s id="3">The books have been dropped of in one long straight line, but they're all out of order, and the automatic sorting system is broken.</s>
 <s id="4">To make matters worse, classes start tomorrow, which means that first thing in the morning, students will show up in droves looking for these books.</s>
 <s id="5">How can you get them all sorted in time?</s>
 <s id="6">One way would be to start at one end of the line with the first pair of books.</s>
 <s id="7">If the first two books are in order, then leave them as they are.</s>
 <s id="8">Otherwise, swap them.</s>
 <s id="9">Then, look at the second and third books, repeat the process, and continue until you reach the end of the line.</s>
 <s id="10">At some point, you'll come across the book that should be last, and keep swapping it with every subsequent book, moving it down the line until it reaches the end where it belongs.</s>
 <s id="11">Then, start from the beginning and repeat the process to get the second to last book in its proper place, and keep going until all books are sorted.</s>
 <s id="12">This approach is called Bubble Sort.</s>
 <s id="13">It's simple but slow.</s>
 <s id="14">You'd make 1,279 comparisons in the first round, then 1,278, and so on, adding up to 818,560 comparisons.</s>
 <s id="15">If each took just one second, the process would take over nine days.</s>
 <s id="16">A second strategy would be to start by sorting just the first two books.</s>
 <s id="17">Then, take the third book and compare it with the book in the second spot.</s>
 <s id="18">If it belongs before the second book, swap them, then compare it with the book in the first spot, and swap again if needed.</s>
 <s id="19">Now you've sorted the first three books.</s>
 <s id="20">Keep adding one book at a time to the sorted sub-line, comparing and swapping the new book with the one before it until it's correctly placed among the books sorted so far.</s>
 <s id="21">This is called Insertion Sort.</s>
 <s id="22">Unlike Bubble Sort, it usually doesn't require comparing every pair of books.</s>
 <s id="23">On average, we'd expect to only need to compare each book to half of the books that came before it.</s>
 <s id="24">In that case, the total number of comparisons would be 409,280, taking almost five days.</s>
 <s id="25">You're still doing way too many comparisons.</s>
 <s id="26">Here's a better idea.</s>
 <s id="27">First, pick a random book.</s>
 <s id="28">Call it the partition and compare it to every other book.</s>
 <s id="29">Then, divide the line by placing all the books that come before the partition on its left and all the ones that come after it on its right.</s>
 <s id="30">You've just saved loads of time by not having to compare any of the books on the left to any of the ones on the right ever again.</s>
 <s id="31">Now, looking only at the books on the left, you can again pick a random partition book and separate those books that come before it from those that come after it.</s>
 <s id="32">You can keep creating sub-partitions like this until you have a bunch of small sub-lines, each of which you'd sort quickly using another strategy, like Insertion Sort.</s>
 <s id="33">Each round of partitioning requires about 1,280 comparisons.</s>
 <s id="34">If your partitions are pretty balanced, dividing the books into 128 sub-lines of ten would take about seven rounds, or 8,960 seconds.</s>
 <s id="35">Sorting these sub-lines would add about 22 seconds each.</s>
 <s id="36">All in all, this method known as QuickSort could sort the books in under three and a half hours.</s>
 <s id="37">But there's a catch.</s>
 <s id="38">Your partitions could end up lopsided, saving no time at all.</s>
 <s id="39">Luckily, this rarely happens.</s>
 <s id="40">That's why QuickSort is one of the most efficient strategies used by programmers today.</s>
 <s id="41">They use it for things like sorting items in an online store by price, or creating a list of all the gas stations close to a given location sorted by distance.</s>
 <s id="42">In your case, you're done quick sorting with time to spare.</s>
 <s id="43">Just another high-stakes day in the library.</s>
</text>
