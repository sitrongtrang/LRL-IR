<?xml version="1.0" encoding="UTF-8"?>

<text>
 <s id="1">Imagine trying to use words to describe every scene in a film, every note in your favorite song, or every street in your town.</s>
 <s id="2">Now imagine trying to do it using only the numbers 1 and 0.</s>
 <s id="3">Every time you use the Internet to watch a movie, listen to music, or check directions, that’s exactly what your device is doing, using the language of binary code.</s>
 <s id="4">Computers use binary because it's a reliable way of storing data.</s>
 <s id="5">For example, a computer's main memory is made of transistors that switch between either high or low voltage levels, such as 5 volts and 0 volts.</s>
 <s id="6">Voltages sometimes oscillate, but since there are only two options, a value of 1 volt would still be read as "low."</s>
 <s id="7">That reading is done by the computer’s processor, which uses the transistors’ states to control other computer devices according to software instructions.</s>
 <s id="8">The genius of this system is that a given binary sequence doesn't have a pre-determined meaning on its own.</s>
 <s id="9">Instead, each type of data is encoded in binary according to a separate set of rules.</s>
 <s id="10">Let’s take numbers.</s>
 <s id="11">In normal decimal notation, each digit is multiplied by 10 raised to the value of its position, starting from zero on the right.</s>
 <s id="12">So 84 in decimal form is 4x10⁰ + 8x10¹.</s>
 <s id="13">Binary number notation works similarly, but with each position based on 2 raised to some power.</s>
 <s id="14">So 84 would be written as follows: Meanwhile, letters are interpreted based on standard rules like UTF-8, which assigns each character to a specific group of 8-digit binary strings.</s>
 <s id="15">In this case, 01010100 corresponds to the letter T.</s>
 <s id="16">So, how can you know whether a given instance of this sequence is supposed to mean T or 84?</s>
 <s id="17">Well, you can’t from seeing the string alone – just as you can’t tell what the sound "da" means from hearing it in isolation.</s>
 <s id="18">You need context to tell whether you're hearing Russian, Spanish, or English.</s>
 <s id="19">And you need similar context to tell whether you’re looking at binary numbers or binary text.</s>
 <s id="20">Binary code is also used for far more complex types of data.</s>
 <s id="21">Each frame of this video, for instance, is made of hundreds of thousands of pixels.</s>
 <s id="22">In color images, every pixel is represented by three binary sequences that correspond to the primary colors.</s>
 <s id="23">Each sequence encodes a number that determines the intensity of that particular color.</s>
 <s id="24">Then, a video driver program transmits this information to the millions of liquid crystals in your screen to make all the different hues you see now.</s>
 <s id="25">The sound in this video is also stored in binary, with the help of a technique called pulse code modulation.</s>
 <s id="26">Continuous sound waves are digitized by taking "snapshots" of their amplitudes every few milliseconds.</s>
 <s id="27">These are recorded as numbers in the form of binary strings, with as many as 44,000 for every second of sound.</s>
 <s id="28">When they’re read by your computer’s audio software, the numbers determine how quickly the coils in your speakers should vibrate to create sounds of different frequencies.</s>
 <s id="29">All of this requires billions and billions of bits.</s>
 <s id="30">But that amount can be reduced through clever compression formats.</s>
 <s id="31">For example, if a picture has 30 adjacent pixels of green space, they can be recorded as "30 green" instead of coding each pixel separately - a process known as run-length encoding.</s>
 <s id="32">These compressed formats are themselves written in binary code.</s>
 <s id="33">So is binary the end-all-be-all of computing?</s>
 <s id="34">Not necessarily.</s>
 <s id="35">There’s been research into ternary computers, with circuits in three possible states, and even quantum computers, whose circuits can be in multiple states simultaneously.</s>
 <s id="36">But so far, none of these has provided as much physical stability for data storage and transmission.</s>
 <s id="37">So for now, everything you see, hear, and read through your screen comes to you as the result of a simple "true" or "false" choice, made billions of times over.</s>
</text>
